{"version":3,"sources":["components/Header/index.js","components/PageTitle/index.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","id","message","yourScore","bestScore","PageTitle","clicked","count","resultArray","Main","_useState","useState","imgArray","urlArray","url","value","urlSortedArray","_useState2","Object","slicedToArray","imgObject","setImg","handleClick","event","preventDefault","indexOf","target","getAttribute","alert","push","length","objectSpread","toConsumableArray","sortArray","sort","Math","random","createImages","arr","i","imgItem","onClick","data-value","data-array","srcSet","alt","components_Header","components_PageTitle","App","pages_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c2e8612.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n        <div className=\"col-xl-4 col-md-4 col-sm-12 col-xs-12\">\n            <h1>Clicky Game</h1>\n        </div>\n        <div className=\"col-xl-4 col-md-4 col-sm-12 col-xs-12\">\n            <h3 id=\"message\">{props.message[0]}</h3>\n            <h4>{props.message[1]}</h4>\n          </div>\n          <div className=\"col-xl-4 col-md-4 col-sm-12 col-xs-12\">\n            <h2>Your Score: {props.yourScore}  | Best Score: {props.bestScore}</h2>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction PageTitle() {\n  return (\n    <div className=\"pageTitle\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>Clicky Game</h1>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PageTitle;\n","import React, { useState } from \"react\";\nimport \"./style.css\";\nimport Header from '../components/Header'\nimport PageTitle from '../components/PageTitle'\n\nlet clicked = []\nlet count = 0;\nlet resultArray = []\nlet message = []\nlet bestScore = 0;\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Main() {\n    const [imgObject, setImg] = useState({\n        imgArray: [],\n        urlArray: [\n            {\n                url: \"../../img/Barney.png\",\n                value: 0\n            },\n            {\n                url: \"/img/Bart.png\",\n                value: 1\n            },\n            {\n                url: \"/img/Burns.png\",\n                value: 2\n            },\n            {\n                url: \"/img/CatsGirl.png\",\n                value: 3\n            },\n            {\n                url: \"/img/Cletus.png\",\n                value: 4\n            },\n            {\n                url: \"/img/Homer.png\",\n                value: 5\n            },\n            {\n                url: \"/img/Lisa.png\",\n                value: 6\n            },\n            {\n                url: \"/img/Nelson.png\",\n                value: 7\n            },\n            {\n                url: \"/img/Otto.png\",\n                value: 8\n            },\n            {\n                url: \"/img/Ralph.png\",\n                value: 9\n            },\n            {\n                url: \"/img/Snake.png\",\n                value: 10\n            },\n            {\n                url: \"/img/Willie.png\",\n                value: 11\n            },\n        ],\n        urlSortedArray: [],\n        value: []\n    })\n\n\n    // sort any array randomly\n    const sortRandomArray = arr => { arr.sort(() => Math.random() - 0.5) }\n\n    const handleClick = event => {\n        event.preventDefault();\n\n\n        if (clicked.indexOf(event.target.getAttribute(\"data-value\")) !== -1) {\n            count = 0;\n            resultArray = [];\n            clicked = []\n            message = []\n            alert(\"You lose!!! hit Ok to play again\")\n        }\n        else {\n            clicked.push(event.target.getAttribute(\"data-value\"))\n            count++\n            // console.log(clicked, count)\n            message[0] = (count === 1) ? \"Ready... GO\" : \"Beautiful memory!!!\"\n            message[1] = \"Do not hit the same image more than once\"\n        }\n\n        if (count === imgObject.urlArray.length) {\n            count = 0;\n            resultArray = [];\n            clicked = []\n            message = []\n            alert(\"Congratulations!!! you are awesome you scored perfect\")\n        }\n\n\n        bestScore = (bestScore < count) ? count : bestScore\n\n        setImg({\n            ...imgObject,\n            urlArray: [...imgObject.urlArray],\n        })\n        // console.log(\"Object Click\", imgObject.urlArray)\n        sortArray();\n    }\n\n\n    const sortArray = () => {\n        // call sortArray function to sort the array of urls\n        sortRandomArray(imgObject.urlArray)\n        setImg({\n            urlArray: [...imgObject.urlArray],\n        })\n    }\n\n    const createImages = () => {\n        let arr = imgObject.urlArray\n\n        resultArray = []\n\n\n        // goes through the array and set src for each image \n        for (let i = 0; i < arr.length; i++) {\n            // console.log(i)\n            const imgItem = <div className=\"col\">\n                <button  className=\"link\" onClick={handleClick} data-value={arr[i].value} data-array={arr.url}>\n                    <div className=\"imgDiv\" data-value={arr[i].value} data-array={arr.url}>\n                        <br></br>\n                        <img className=\"img\" srcSet={arr[i].url} alt='' data-value={arr[i].value} data-array={arr.url}>\n                        </img>\n                    </div>\n                </button>\n                <br></br>\n                <br></br>\n            </div>;\n            resultArray.push(imgItem);\n        }\n        return (resultArray)\n\n    }\n\n    createImages();\n\n    // console.log(imgArray)\n    return (\n        <div className=\"Main\">\n            <div className=\"headerMain\">\n                <Header yourScore={count} bestScore={bestScore} message={message}></Header>\n            </div>\n            <div className=\"titleMain\">\n                <PageTitle></PageTitle>\n            </div>\n            <div className=\"ImgContent\">\n                <div className=\"container\">\n                    <div className=\"row\" >\n                        {\n                            createImages()\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/Main'\n\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n        <Main></Main>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}